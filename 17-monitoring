Setting up the Monitoring with CloudWatch
Now that we've deployed the sample votingapp:

Create a heartbeat canary that monitors the uptime of the sample votingapp application and will consider the check successful if a URL returns a http status code of 2xx. We'll use this to understand the customer experience during the chaos experiments.
Let's take a look at some of the metrics and insights provided by our environment. This data will help us to understand our application performance, state, and overall health. Below, you'll find an overview of the tools we're using as part of this lab to provide these insights.
Amazon CloudWatch
Amazon CloudWatch is a monitoring and management service that provides data and actionable insights for AWS, hybrid, and on-premises applications and infrastructure resources. CloudWatch gives you actionable insights that help you optimize application performance, manage resource utilization, and understand system-wide operational health.

For the purposes of this lab, we've pre-built a simple CloudWatch dashboard containing relevant metrics for our application and infrastructure. The dashboard provides a high-level overview of the overall health and state of your EKS environment.

Amazon CloudWatch Container Insights
We will use CloudWatch Container Insights to get cluster-level metrics from Amazon EKS. This tool allows us to collect, aggregate, and summarize metrics and logs from containerized applications and microservices. Container Insights is available for Amazon Elastic Container Service (Amazon ECS), Amazon Elastic Kubernetes Service (Amazon EKS), and Kubernetes platforms on Amazon EC2. Container Insights supports collecting metrics from clusters deployed on Fargate for both Amazon ECS and Amazon EKS.

CloudWatch automatically collects metrics for many resources, such as CPU, memory, disk, and network. Container Insights also provides diagnostic information, such as container restart failures, to help you isolate issues and resolve them quickly.

Creating your heartbeat canary
In the AWS Management Console on the Services menu, click CloudWatch.
On the left navigation menu under the Application Signals section, click Synthetics Canaries.
Click the Create canary button.
Choose Use a blueprint, and from the Blueprint section choose Heartbeat monitoring.
Name your canary welcomeapp.
Enter your Application or endpoint URL, this is the Ingress_1 endpoint which you've run curl against in application setup. Use the command echo $Ingress_1 to print the URL which you can copy to your clipboard. Canary Builder Screen.
Scroll to the Schedule section and set the canary to run every 1 minute.
Then, under Cloudwatch Alarms, create a new alarm as shown below. 
Leave everything else as default and choose to Create canary. Wait for the canary to create - you will be redirected to the Canaries overview screen.
From the Canaries overview: You will see a blue dot for a successful run, or a red dot if it has failed to reach the endpoint or the application is down.


